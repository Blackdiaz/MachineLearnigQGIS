# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MachineLearningDeslizamientos
                                 A QGIS plugin
 Predice areas de deslizamiento 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-08
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Aldo Diaz/ GCG
        email                : mecatronica.gcg@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import *
from matplotlib.backends.backend_qt5agg import (FigureCanvas,
                                                NavigationToolbar2QT as NavigationToolbar)
from matplotlib.figure import Figure
import random
import numpy as np
import osgeo.gdal
from matplotlib import cm
from matplotlib.colors import LightSource
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import plotly.graph_objects as go
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.neural_network import MLPClassifier
import pickle
import tempfile

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .Machine_Learning_Deslizamientos_dialog import MachineLearningDeslizamientosDialog
import os.path


class MachineLearningDeslizamientos:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MachineLearningDeslizamientos_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Machine Learning Deslizamientos')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MachineLearningDeslizamientos', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/Machine_Learning_Deslizamientos/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Predecir zonas de deslizamiento'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Machine Learning Deslizamientos'),
                action)
            self.iface.removeToolBarIcon(action)

    def makePrediction(self):
        self.dlg.textEditErrors.append(
            'Iniciando prediccion de zonas de deslizamiento...')
        directorio =[
            self.dlg.lineEditPrecipitacion.text(),
            self.dlg.lineEditPendiente.text(),
            self.dlg.lineEditAspecto.text(),
            self.dlg.lineEditCurvatura_Perfil.text(),
            self.dlg.lineEditCurvatura_Plano.text(),
            self.dlg.lineEditDEM.text(),
            self.dlg.lineEditHumedad.text(),
            self.dlg.lineEditHillshade.text(),
            self.dlg.lineEditNDVI.text(),
            self.dlg.lineEditNDWI.text(),
            self.dlg.lineEditRugosidad.text()] 

        '''
        directorio = [
            "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/Precipitacion/Precipitacion_2020_fix.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/Pendiente/Pendiente_2020.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/Aspecto/Aspecto_2020_fix.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/Curvatura de perfil/Curvatura_perfil_2020_fix.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/Curvatura de plano/Curvatura_de_plano_2020_fix.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/DEM/DEM_2020_Recortado.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/Distancia a rios/IndiceTopograficoHumedad_2020_fix.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/HillShade/HillShade_2020_90.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/NDVI/NDVI-2020-Recortado.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/NDWI/NDWI_2020.tif", "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/Rugosidad/Rugosidad_2020_Recortado_fix.tif"
        ]'''

        features = []
        self.dlg.progressBar.setValue(30)
        for index, file in enumerate(directorio):
            # print(file)
            ds = osgeo.gdal.Open(file)
            gt = ds.GetGeoTransform()
            proj = ds.GetProjection()
            band = ds.GetRasterBand(1)

            features.append(band.ReadAsArray())
            self.aX,self.aY = features[index].shape
            self.shape = self.aX*self.aY
            features[index].shape = self.shape

        self.dlg.textEditErrors.append(
            'Capas Raster cargadas correctamente...')
        self.dlg.progressBar.setValue(40)

        union = np.array([features[0]] +
                         [features[1]] +
                         [features[2]] +
                         [features[3]] +
                         [features[4]] +
                         [features[5]] +
                         [features[6]] +
                         [features[7]] +
                         [features[8]] +
                         [features[9]] +
                         [features[10]]
                         )
        features = []

        union = union.transpose()
        # Verify that the values are not nan
        union[np.isnan(union)] = 0

        # compute the mean value per feature on the training set
        mean_on_train = union.mean(axis=0)
        # compute the standard deviation of each feature on the training set
        std_on_train = union.std(axis=0)
        # subtract the mean, and scale by inverse standard deviation
        # afterward, mean=0 and std=1
        union_scaled = (union - mean_on_train) / std_on_train

        # preprocessing using 0-1 scaling
        scaler = MinMaxScaler()
        scaler.fit(union_scaled)
        union_scaled = scaler.transform(union_scaled)
        union = None
        self.dlg.textEditErrors.append('Datos normalizados exitosamente...')
        #resultados = np.load(
         #   'C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/Capas para Machine Learning/target_NDVI_PCA_Pendiente.npy')

        filename = self.plugin_dir+'/modelos/mlp_model546.sav'
        # load the model from disk
        with open(filename, 'rb') as f:   # will close() when we leave this block
            loaded_Model_MLP = pickle.load(f)
            #loaded_Model_MLP = pickle.load(open(filename, 'rb'))
            self.dlg.textEditErrors.append(
                'Modelo de prediccion cargado correctamente...')
            aux = []

            segmentos = 0
            noDatos = 0
            

            for i in range(1, self.shape, 1):

                if(self.shape % i == 0):

                    noDatos = self.shape/i
                    if(noDatos < 1000000):
                        segmentos=i
                        break
            noDatos = int(noDatos)
            resultados = np.zeros(self.shape)
            for i in range(0, segmentos, 1):
                print(i*noDatos," a ",(i+1)*noDatos)
                X_train, X_test, y_train, y_test = train_test_split(
                    union_scaled[i*noDatos:(i+1)*noDatos], resultados[i*noDatos:(i+1)*noDatos], test_size=0.2, random_state=1, shuffle=False)

                predicted_train_MPL = loaded_Model_MLP.predict_proba(X_train)[
                    0:, 1:2]
                predicted_test_MPL = loaded_Model_MLP.predict_proba(X_test)[
                    0:, 1:2]

                aux.extend(predicted_train_MPL)
                aux.extend(predicted_test_MPL)
                predicted_train_MPL = []
                predicted_test_MPL = []

            predicted_train_MLP_fix = np.array(aux)
            aux = None
            self.dlg.textEditErrors.append(
                'Guardando predicciones en directorio...')
            predicted_train_MLP_fix.shape = [self.aX, self.aY]

            ds = osgeo.gdal.Open(self.dlg.lineEditDEM.text())
            gt = ds.GetGeoTransform()
            proj = ds.GetProjection()
            band = ds.GetRasterBand(1)

            driver = osgeo.gdal.GetDriverByName("GTiff")
            driver.Register()

            if(self.dlg.lineEditDireccionPrediccion.text()):
                self.route = self.dlg.lineEditDireccionPrediccion.text()+'.tif'

            outds = driver.Create(self.route, xsize=predicted_train_MLP_fix.shape[1],
                                  ysize=predicted_train_MLP_fix.shape[0], bands=1,
                                  eType=osgeo.gdal.GDT_Float32)
            outds.SetGeoTransform(gt)
            outds.SetProjection(proj)
            outband = outds.GetRasterBand(1)
            outband.WriteArray(predicted_train_MLP_fix)
            outband.SetNoDataValue(0)
            outband.FlushCache()
            self.dlg.textEditErrors.append('Proceso finalizado con exito.')
            print("FInished", self.route)
            # close your datasets and bands!!!
            outband = None
            outds = None

    def plot(self):
        # Recieve an array(geotiff) original DEM
        # soon will recieve machine learning DEM
        self.makePrediction()

        self.dlg.progressBar.setValue(50)

        if(self.dlg.lineEditDireccionPrediccion.text()):
            self.route = self.dlg.lineEditDireccionPrediccion.text()+'.tif'

        ds = osgeo.gdal.Open(self.route)
        gt = ds.GetGeoTransform()
        proj = ds.GetProjection()

        band = ds.GetRasterBand(1)
        # convert raster to an array
        geotiff = band.ReadAsArray()
        self.shapeX = geotiff.shape[1]
        self.shapeY = geotiff.shape[0]

        xres = gt[1]
        yres = gt[5]

        x = np.arange(gt[0], gt[0] + geotiff.shape[1]*xres, xres)
        y = np.arange(gt[3], gt[3] + geotiff.shape[0]*yres, yres)

        # Insert the canvas in a layout of the window
        self.dlg.mpl.addWidget(self.canvas)

        self.canvas.axes = self.canvas.figure.add_subplot(111)

        self.canvas.axes.clear()

        self.canvas.axes.imshow(geotiff, cmap='Spectral_r')
        ticksX = [0, int(x.shape[0]*0.2), int(x.shape[0]*0.4),
                  int(x.shape[0]*0.6), int(x.shape[0]*0.8), int(x.shape[0]-1)]
        ticksY = [0, int(y.shape[0]*0.2), int(y.shape[0]*0.4),
                  int(y.shape[0]*0.6), int(y.shape[0]*0.8), int(y.shape[0]-1)]

        ticklabelsX = [x[ticksX[0]], x[ticksX[1]], x[ticksX[2]],
                       x[ticksX[3]], x[ticksX[4]], x[ticksX[5]]]
        ticklabelsY = [y[ticksY[0]], y[ticksY[1]], y[ticksY[2]],
                       y[ticksY[3]], y[ticksY[4]], y[ticksY[5]]]

        self.canvas.axes.set_xticks(ticksX)
        self.canvas.axes.set_xticklabels(ticklabelsX, fontsize=6, rotation=20)
        self.canvas.axes.set_yticks(ticksY)
        self.canvas.axes.set_yticklabels(ticklabelsY, fontsize=6)

        # x,y widfth, height
        posX = int((self.ejeX/100)*self.shapeX)
        posY = int((self.ejeY/100)*self.shapeY)

        rect = patches.Rectangle(
            (posX, posY), 1000, 1000, linewidth=1, edgecolor='r', facecolor='none')
        self.canvas.axes.add_patch(rect)
        self.canvas.axes.set_title('Zona con probabilidades de deslizamiento')
        self.canvas.figure.tight_layout()
        self.canvas.draw()

        # This create the toolbar of the plot (canvas,layout,...)
        self.dlg.toolBarLayout.addWidget(self.toolbar)
        self.dlg.progressBar.setValue(100)

    def plot3D(self):

        # read the raster with gdal

        if(self.dlg.lineEditDireccionPrediccion.text()):
            self.route = self.dlg.lineEditDireccionPrediccion.text()+'.tif'

        ds = osgeo.gdal.Open(self.dlg.lineEditDEM.text())
        gt = ds.GetGeoTransform()
        proj = ds.GetProjection()

        band = ds.GetRasterBand(1)
        # convert raster to an array
        array = band.ReadAsArray()
        self.dlg.progressBar.setValue(30)

        #fig, ax = plt.subplots()

        xsize = gt[1]
        # Leemos los valores del MDT como un array de dimensiones x, y (x arrays de y elementos)

        nrows, ncols = array.shape
        xmin = gt[0]
        xmax = xmin + (ncols * xsize)
        ymin = gt[2]
        # Conocemos la resolución en "y", es igual a la resolución en "x"
        ymax = ymin + (nrows * xsize)

        # Hemos importado numpy como np
        # npz es el nombre de la variable que contiene la ruta para el fichero npz
        npz = ""
        np.savez(npz, elevation=array, xmin=xmin,
                 xmax=xmax, ymin=ymin, ymax=ymax)

        dem = np.load(".npz", "r")
        z = dem['elevation']
        nrows, ncols = z.shape

        xres = gt[1]
        yres = gt[5]

        X = np.arange(gt[0], gt[0] + z.shape[1]*xres, xres)
        Y = np.arange(gt[3], gt[3] + z.shape[0]*yres, yres)
        #X= list(map(lambda x: "{0:.3f}".format(x),X))
        #Y= list(map(lambda x: "{0:.3f}".format(x),Y))

        #x = np.linspace(dem['xmin'], dem['xmax'], ncols)
        #y = np.linspace(dem['ymin'], dem['ymax'], nrows)

        x, y = np.meshgrid(X, Y)
        self.dlg.progressBar.setValue(50)
        # y lenght - x lenght
        posX = int((self.ejeX/100)*z.shape[1])
        posY = int((self.ejeY/100)*z.shape[0])
        print(posX)
        print(posY)
        print(X[43])
        print(X[1043])
        region = np.s_[posY:posY+500, posX:posX+500]

        # plt.show()

        x, y, z = x[region], y[region], z[region]

        ds = osgeo.gdal.Open("C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/predMPL_prueba546.tif")
        band = ds.GetRasterBand(1)
        matriz = band.ReadAsArray()
        matriz = matriz[region]

        ds = osgeo.gdal.Open(
            "C:/Users/Admin/Documents/Practicas Geofisica/DataSet Raster/streetMaps.tif")
        gt = ds.GetGeoTransform()
        proj = ds.GetProjection()
        band = ds.GetRasterBand(1)
        data = band.ReadAsArray()

        self.dlg.progressBar.setValue(70)

        fig = go.Figure(data=[

            go.Surface(z=z,
                       x=x,
                       y=y,
                       surfacecolor=matriz,
                       cmin=0,
                       cmax=1,
                       showscale=True,
                       colorscale='Spectral',
                       reversescale=True,
                       opacity=1)

        ])

        # fig.update_yaxes(autorange="reversed")
        fig.update_layout(margin=dict(l=0, r=0, b=0, t=0))
        # fix the ratio in the top left subplot to be a cube
        fig.update_layout(scene_aspectmode='manual',
                          scene_aspectratio=dict(x=1, y=1, z=0.2))
        self.dlg.progressBar.setValue(90)
        # fig.update_layout(scene_aspectmode='data')
        fig.show()
        self.dlg.progressBar.setValue(100)

    def select_input_file(self, lineEditOption):
        filename = QFileDialog.getOpenFileName()
        if(os.path.isfile(filename[0])):
            lineEditOption.setText(filename[0])
            #self.RasterDEM = filename[0]
            # self.plot()

    def select_output_file(self, lineEditOption):
        filename, _ = QFileDialog.getSaveFileName()
        lineEditOption.setText(filename)

    def changeValueX(self, value):
        self.ejeX = value
        self.moveRectanglePlot()

    def changeValueY(self, value):
        self.ejeY = value
        self.moveRectanglePlot()

    def moveRectanglePlot(self):
        [p.remove() for p in reversed(self.canvas.axes.patches)]
        posX = int((self.ejeX/100)*self.shapeX)
        posY = int((self.ejeY/100)*self.shapeY)

        rect = patches.Rectangle(
            (posX, posY), 500, 500, linewidth=1, edgecolor='r', facecolor='none')
        self.canvas.axes.add_patch(rect)
        self.canvas.draw()

    def run(self):
        """Run method that performs all the real work"""
        self.route = tempfile.gettempdir()+'\Prediccion_Deslizamiento.tif'

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.ejeY = 1
            self.ejeX = 1
            self.first_start = False
            self.dlg = MachineLearningDeslizamientosDialog()
            # Create canvas to plot after
            self.canvas = FigureCanvas(Figure())
            self.toolbar = NavigationToolbar(
                self.canvas, self.dlg.widget, coordinates=True)

        # show the dialog
        self.dlg.show()

        self.dlg.progressBar.setValue(0)

        # on clikc get the path of each raster

        self.dlg.pushButtonOpenDEM.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditDEM))
        self.dlg.pushButtonOpenPrecipitacion.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditPrecipitacion))
        self.dlg.pushButtonOpenPendiente.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditPendiente))
        self.dlg.pushButtonOpenAspecto.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditAspecto))
        self.dlg.pushButtonOpenCurvatura_Perfil.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditCurvatura_Perfil))
        self.dlg.pushButtonOpenCurvatura_Plano.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditCurvatura_Plano))
        self.dlg.pushButtonOpenHumedad.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditHumedad))
        self.dlg.pushButtonOpenHillshade.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditHillshade))
        self.dlg.pushButtonOpenNDVI.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditNDVI))
        self.dlg.pushButtonOpenNDWI.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditNDWI))
        self.dlg.pushButtonOpenRugosidad.clicked.connect(
            lambda: self.select_input_file(self.dlg.lineEditRugosidad))
        self.dlg.pushButtonSavePrediction.clicked.connect(
            lambda: self.select_output_file(self.dlg.lineEditDireccionPrediccion))

        self.dlg.sliderX.valueChanged[int].connect(self.changeValueX)
        self.dlg.sliderY.valueChanged[int].connect(self.changeValueY)

        self.dlg.pushButtonGenerarPrediccion.clicked.connect(self.plot)
        self.dlg.pushButtonVisualizar3D.clicked.connect(self.plot3D)

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
